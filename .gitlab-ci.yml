image: ubuntu:16.10

variables:
  DOCKER_DRIVER: overlay2

stages:
  - build
  - deploy

# These have to be done before pretty much all jobs
before_script:
  - apt-get update
  - apt-get install -y python3.5 python3-pip
  - pip3 install peewee

# Make sure the updated kernel.db is passed down the pipeline
cache:
    key: "$CI_PIPELINE_ID"
    paths:
      - kernel.db

# Patch and build the kernel
kernel:
  stage: build
  script:
    # Install dependencies
    - apt-get install -y git build-essential kernel-package fakeroot libncurses5-dev libssl-dev ccache

    # Download kernel source and patch it
    - python3.5 scripts/setup-patches.py "$KERN_MSG_TITLE"
    - source workspace

    # Build the kernel
    - cp kernel_config $KERNEL_WORKSPACE/linux
    - pushd $KERNEL_WORKSPACE/linux
    - make olddefconfig
    - make clean
    - make -j `getconf _NPROCESSORS_ONLN` deb-pkg LOCALVERSION=-acso
    - popd

    # Store the build artifacts
    - mkdir artifacts
    - cp $KERNEL_WORKSPACE/*.deb artifacts
    - cp $KERNEL_WORKSPACE/*.tar.gz artifacts
    - cp $KERNEL_WORKSPACE/*.changes artifacts
    - cp $KERNEL_WORKSPACE/*.dsc artifacts

    # Log the successful build in git
    - mkdir -p ~/.ssh
    - echo "$CI_PUSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - git config --global user.email max.ehr@gmail.com
    - git config --global user.name Queuecumber
    - git remote -v
    - python3.5 scripts/log_build.py "$KERN_MSG_TITLE" $CI_JOB_ID
    - git add kernel.db
    - "git commit -m \"[CI: $CI_PIPELINE_ID] Add $KERN_MSG_TITLE\""
    - git remote set-url origin git@gitlab.com:Queuecumber/linux-acs-override.git
    - git push
  only:
    - triggers
  artifacts:
    paths: 
      - artifacts

# Upload the patched source package to the ppa
ppa:
  stage: deploy
  script:
    - apt-get install -y devscripts gpg
    - echo "$CI_SIGN_KEY" | gpg --import --batch --no-tty --yes
    - debsign -k $DEBSIGN_KEYID *.changes
    - dput ppa:queuecumber/acso *.changes
  only:
    - triggers
  allow_failure: true

# Generate a new json file for the homepage
pages:
  stage: deploy
  script:
    - python3.5 scripts/sql_to_json.py public/kernel.json
  only:
    - triggers
  artifacts:
    paths:
    - public
